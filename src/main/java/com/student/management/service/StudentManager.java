package com.student.management.service;

import com.student.management.model.Student;
import com.student.management.util.DBConnection;

import java.sql.*;
import java.util.*;
import java.util.regex.Pattern;

/**
 * StudentManager provides methods to manage student records in the database.
 * It supports CRUD operations, input validation, and various reporting features.
 */
public class StudentManager
{
    // Constructor
    public StudentManager()
    {
    }

    // -------------------------------------------------
    // Display Methods
    // -------------------------------------------------

    /**
     * Displays a list of students in a formatted table.
     *
     * @param students List of Student objects to be displayed.
     */
    public void displayStudents(List<Student> students)
    {
        System.out.println("\n");

        // Table header
        System.out.println("--------------------------------------------");
        System.out.printf("%-8s | %-18s | %-4s | %-5s%n", "ID", "Name", "Age", "Grade");
        System.out.println("--------------------------------------------");

        // Loop through and display each student
        for (Student student : students)
        {
            System.out.printf("%-8d | %-18s | %-4d | %-5s%n",
                    student.getId(),
                    student.getName(),
                    student.getAge(),
                    student.getGrade());
        }
        System.out.println("--------------------------------------------");

        // Notify if no records exist
        if (students.isEmpty())
        {
            System.out.println("\n❌ No student records found.");
        }
    }

    // -------------------------------------------------
    // CRUD Operations
    // -------------------------------------------------

    /**
     * Adds a new student to the database by reading input from the user.
     *
     * @param scanner Scanner object to capture user input.
     */
    public void addStudentFromInput(Scanner scanner)
    {
        System.out.println("\nPlease enter the student details:");

        // Validate and get user inputs (ID is autogenerated by MySQL)
        String name = validateName(scanner);
        int age = validateAge(scanner);
        String grade = validateGrade(scanner);

        String query = "INSERT INTO students (name, age, grade) VALUES (?, ?, ?)";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(query))
        {
            ps.setString(1, name);
            ps.setInt(2, age);
            ps.setString(3, grade);

            int rowsAffected = ps.executeUpdate();
            if (rowsAffected > 0)
            {
                System.out.println("\n✅ Student '" + name + "' added successfully.");
            }
            else
            {
                System.out.println("❌ Failed to add student '" + name + "'.");
            }
        }
        catch (SQLException e)
        {
            System.out.println("❌ Database error: Unable to add student. Please try again.");
            e.printStackTrace(); // Replace with proper logging in production
        }
    }

    /**
     * Retrieves and displays all student records from the database.
     */
    public void viewAllStudents()
    {
        String sql = "SELECT * FROM students";
        List<Student> students = new ArrayList<>();

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery())
        {
            // Build list of students from result set
            while (rs.next())
            {
                students.add(new Student(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getInt("age"),
                        rs.getString("grade")
                ));
            }
            displayStudents(students);
        }
        catch (SQLException e)
        {
            System.out.println("❌ Database error: Unable to fetch students.");
            e.printStackTrace();
        }
    }

    /**
     * Searches for a student by their ID.
     *
     * @param id The student's ID to search for.
     * @return Student object if found, null otherwise.
     */
    public Student searchById(int id)
    {
        String sql = "SELECT * FROM students WHERE id = ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql))
        {
            ps.setInt(1, id);
            ResultSet rs = ps.executeQuery();

            if (rs.next())
            {
                return new Student(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getInt("age"),
                        rs.getString("grade")
                );
            }
        }
        catch (SQLException e)
        {
            System.out.println("❌ Database error: Unable to search for student.");
            e.printStackTrace();
        }
        return null;
    }

    /**
     * Searches for students by name (supports partial matches) and displays the results.
     *
     * @param scanner Scanner object to capture user input.
     */
    public void searchByName(Scanner scanner)
    {
        System.out.print("\nEnter student name: ");
        String name = validateName(scanner);
        String sql = "SELECT * FROM students WHERE name LIKE ?";

        List<Student> students = new ArrayList<>();

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql))
        {
            ps.setString(1, "%" + name + "%");
            ResultSet rs = ps.executeQuery();

            while (rs.next())
            {
                students.add(new Student(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getInt("age"),
                        rs.getString("grade")
                ));
            }
            displayStudents(students);
        }
        catch (SQLException e)
        {
            System.out.println("❌ Database error: Unable to search by name.");
            e.printStackTrace();
        }
    }

    /**
     * Searches for students by grade and displays matching results.
     *
     * @param scanner Scanner object to capture user input.
     */
    public void searchByGrade(Scanner scanner)
    {
        System.out.print("\nEnter grade: ");
        String grade = validateGrade(scanner);
        String sql = "SELECT * FROM students WHERE grade = ?";

        List<Student> students = new ArrayList<>();

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql))
        {
            ps.setString(1, grade);
            ResultSet rs = ps.executeQuery();

            while (rs.next())
            {
                students.add(new Student(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getInt("age"),
                        rs.getString("grade")
                ));
            }
            displayStudents(students);
        }
        catch (SQLException e)
        {
            System.out.println("❌ Database error: Unable to search by grade.");
            e.printStackTrace();
        }
    }

    /**
     * Removes a student record from the database by ID.
     *
     * @param scanner Scanner object to capture user input.
     */
    public void removeStudentById(Scanner scanner)
    {
        System.out.print("\nEnter student ID to remove: ");
        int id = validateId(scanner);

        String sql = "DELETE FROM students WHERE id = ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql))
        {
            ps.setInt(1, id);
            int rowsAffected = ps.executeUpdate();

            if (rowsAffected > 0)
            {
                System.out.println("\n✅ Student removed successfully.");
            }
            else
            {
                System.out.println("❌ No student found with ID " + id + ".");
            }
        }
        catch (SQLException e)
        {
            System.out.println("❌ Database error: Unable to remove student.");
            e.printStackTrace();
        }
    }

    /**
     * Updates a student's details by ID.
     *
     * @param scanner Scanner object to capture user input.
     */
    public void updateStudentById(Scanner scanner)
    {
        System.out.print("\nEnter student ID to update: ");
        int id = validateId(scanner);

        // Fetch existing student record
        Student student = searchById(id);
        if (student == null)
        {
            System.out.println("❌ No student found with ID " + id + ".");
            return;
        }

        System.out.println("\nEnter new details for the student:");
        String newName = validateName(scanner);
        int newAge = validateAge(scanner);
        String newGrade = validateGrade(scanner);

        String sql = "UPDATE students SET name = ?, age = ?, grade = ? WHERE id = ?";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql))
        {
            ps.setString(1, newName);
            ps.setInt(2, newAge);
            ps.setString(3, newGrade);
            ps.setInt(4, id);

            int rowsAffected = ps.executeUpdate();
            if (rowsAffected > 0)
            {
                System.out.println("✅ Student updated successfully.");
            }
            else
            {
                System.out.println("❌ Failed to update student.");
            }
        }
        catch (SQLException e)
        {
            System.out.println("❌ Database error: Unable to update student.");
            e.printStackTrace();
        }
    }

    // -------------------------------------------------
    // Validation Helper Methods
    // -------------------------------------------------

    /**
     * Validates a student ID ensuring it is a positive integer.
     * This method is used for update and removal operations.
     *
     * @param scanner Scanner object to capture user input.
     * @return Validated student ID.
     */
    public static int validateId(Scanner scanner)
    {
        int id;
        while (true)
        {
            try
            {
                System.out.print("Enter Student ID (positive integer): ");
                id = Integer.parseInt(scanner.nextLine().trim());
                if (id <= 0)
                {
                    System.out.println("🔴 Error: ID must be a positive integer.");
                    continue;
                }
                return id;
            }
            catch (NumberFormatException e)
            {
                System.out.println("🔴 Invalid input. Please enter a valid integer.");
            }
        }
    }

    /**
     * Validates the student's name ensuring only letters and spaces are allowed.
     *
     * @param scanner Scanner object to capture user input.
     * @return Validated student name.
     */
    private String validateName(Scanner scanner)
    {
        while (true)
        {
            System.out.print("Enter Name (letters only): ");
            String name = scanner.nextLine().trim();
            if (!name.isEmpty() && Pattern.matches("^[a-zA-Z\\s]+$", name))
            {
                return name;
            }
            System.out.println("🔴 Invalid name. Only letters and spaces are allowed.");
        }
    }

    /**
     * Validates the student's age ensuring it is between 5 and 120.
     *
     * @param scanner Scanner object to capture user input.
     * @return Validated age.
     */
    private int validateAge(Scanner scanner)
    {
        int age;
        while (true)
        {
            try
            {
                System.out.print("Enter Age (5 to 120): ");
                age = Integer.parseInt(scanner.nextLine().trim());
                if (age >= 5 && age <= 120)
                {
                    return age;
                }
                System.out.println("🔴 Age must be between 5 and 120.");
            }
            catch (NumberFormatException e)
            {
                System.out.println("🔴 Invalid input. Please enter a valid integer.");
            }
        }
    }

    /**
     * Validates the student's grade ensuring it matches allowed values.
     *
     * @param scanner Scanner object to capture user input.
     * @return Validated grade.
     */
    private String validateGrade(Scanner scanner)
    {
        while (true)
        {
            System.out.print("Enter Grade (O, E, A, B, C, D, or F): ");
            String grade = scanner.nextLine().trim().toUpperCase();
            if (Pattern.matches("^(O|E|A|B|C|D|F)$", grade))
            {
                return grade;
            }
            System.out.println("🔴 Invalid grade. Allowed formats: O, E, A, B, C, D, or F.");
        }
    }

    // -------------------------------------------------
    // Reporting Features
    // -------------------------------------------------

    /**
     * Generates and displays a grade distribution report.
     * Groups students by grade and shows the count for each grade.
     */
    public void generateGradeReport()
    {
        System.out.println("\n📊 Grade Distribution Report: ");
        Map<String, Integer> gradeCount = new HashMap<>();
        String sql = "SELECT grade, COUNT(*) AS count FROM students GROUP BY grade";

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery())
        {
            while (rs.next())
            {
                String grade = rs.getString("grade");
                int count = rs.getInt("count");
                gradeCount.put(grade, count);
            }

            // Display the report
            if (gradeCount.isEmpty())
            {
                System.out.println("❌ No students found.");
            }
            else
            {
                gradeCount.forEach((grade, count) -> System.out.println(grade + ": " + count));
            }
        }
        catch (SQLException e)
        {
            System.out.println("❌ Database error: Unable to generate grade report.");
            e.printStackTrace();
        }
    }

    /**
     * Generates and displays a report for students within a specified age range.
     *
     * @param scanner Scanner object to capture user input.
     */
    public void generateAgeRangeReport(Scanner scanner)
    {
        System.out.println("\nEnter minimum age: ");
        int minAge = validateAge(scanner);

        System.out.println("\nEnter maximum age: ");
        int maxAge = validateAge(scanner);

        // Ensure valid range: min should be less than or equal to max.
        while (minAge > maxAge)
        {
            System.out.println("\n⚠️ Please enter a valid age range.");
            System.out.println("\nEnter minimum age: ");
            minAge = validateAge(scanner);
            System.out.println("\nEnter maximum age: ");
            maxAge = validateAge(scanner);
        }

        System.out.println("\n📊 Age Range Report (" + minAge + " to " + maxAge + ")");

        String sql = "SELECT id, name, age, grade FROM students WHERE age BETWEEN ? AND ?";
        List<Student> ageFiltered = new ArrayList<>();

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql))
        {
            ps.setInt(1, minAge);
            ps.setInt(2, maxAge);

            ResultSet rs = ps.executeQuery();
            while (rs.next())
            {
                ageFiltered.add(new Student(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getInt("age"),
                        rs.getString("grade")
                ));
            }
            displayStudents(ageFiltered);
        }
        catch (SQLException e)
        {
            System.out.println("❌ Database error: Unable to generate age range report.");
            e.printStackTrace();
        }
    }

    /**
     * Generates a summary statistics report including total students,
     * average age, and grade distribution.
     */
    public void generateSummaryStatisticsReport()
    {
        System.out.println("\n📊 Summary Statistics:");
        System.out.println("--------------------------------------------");

        String studentCountSql = "SELECT COUNT(*) AS total FROM students";
        String avgAgeSql = "SELECT AVG(age) AS avg_age FROM students";

        try (Connection conn = DBConnection.getConnection())
        {
            // Total number of students
            int totalStudents = 0;
            try (PreparedStatement ps = conn.prepareStatement(studentCountSql);
                 ResultSet rs = ps.executeQuery())
            {
                if (rs.next())
                {
                    totalStudents = rs.getInt("total");
                }
            }
            if (totalStudents == 0)
            {
                System.out.println("\n❌ No students available to generate statistics.");
                return;
            }
            System.out.println("Total Students: " + totalStudents);

            // Average age
            double averageAge = 0.0;
            try (PreparedStatement ps = conn.prepareStatement(avgAgeSql);
                 ResultSet rs = ps.executeQuery())
            {
                if (rs.next())
                {
                    averageAge = rs.getDouble("avg_age");
                }
            }
            System.out.printf("Average Age: %.2f%n", averageAge);

            // Display grade distribution by reusing the grade report method
            System.out.println("\nGrade Distribution:");
            generateGradeReport();
        }
        catch (SQLException e)
        {
            System.out.println("❌ Database error: Unable to generate summary statistics.");
            e.printStackTrace();
        }
    }

    /**
     * Generates and displays the top performers report based on grade priority.
     * Orders students according to a defined grade priority and displays the top 10.
     */
    public void generateTopPerformersReport()
    {
        String sql = """
            SELECT id, name, age, grade
            FROM students
            ORDER BY 
                CASE grade
                    WHEN 'O' THEN 7
                    WHEN 'E' THEN 6
                    WHEN 'A' THEN 5
                    WHEN 'B' THEN 4
                    WHEN 'C' THEN 3
                    WHEN 'D' THEN 2
                    WHEN 'F' THEN 1
                    ELSE 0
                END DESC
            LIMIT 10;
            """;

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery())
        {
            List<Student> topPerformers = new ArrayList<>();
            while (rs.next())
            {
                topPerformers.add(new Student(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getInt("age"),
                        rs.getString("grade")
                ));
            }
            System.out.println("\n🎖️ Top Performers:");
            displayStudents(topPerformers);
        }
        catch (SQLException e)
        {
            System.out.println("\n❌ Error fetching top performers: " + e.getMessage());
        }
    }
}
